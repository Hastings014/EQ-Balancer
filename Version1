<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>EQ Combined Frequency Response Export</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      margin: 20px;
    }
    button {
      padding: 10px 20px;
      font-size: 16px;
      margin: 10px;
    }
    .slider-container {
      margin: 20px 0;
      text-align: left;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .slider-container label {
      margin-bottom: 5px;
      font-size: 14px;
    }
    input[type="range"] {
      width: 90%;
    }
    #console {
      background-color: #1e1e1e;
      color: #ffffff;
      font-family: monospace;
      font-size: 14px;
      padding: 10px;
      margin-top: 20px;
      height: 200px;
      overflow-y: auto;
      border: 1px solid #444;
    }
    .log {
      color: #9cdcfe;
    }
    .warn {
      color: #dcdcaa;
    }
    .error {
      color: #f48771;
    }
  </style>
</head>
<body>
  <h1>EQ Combined Frequency Response Export</h1>
  <button id="playPauseButton">Play Band-Passed Pink Noise</button>
  <button id="nextButton" disabled>Next</button>
  <button id="exportButton" disabled>Export EQ Frequency Response</button>

  <div class="slider-container">
    <label for="preampSlider">Preamp (-15 dB to +15 dB)</label>
    <input type="range" id="preampSlider" min="-15" max="15" step="0.1" value="0">
  </div>

  <div id="eqSlidersContainer">
    <!-- EQ sliders will be dynamically added here -->
  </div>

  <div id="console">
    <strong>On-Screen Developer Console</strong>
    <div id="consoleContent"></div>
  </div>

  <script>
    const playPauseButton = document.getElementById('playPauseButton');
    const nextButton = document.getElementById('nextButton');
    const exportButton = document.getElementById('exportButton');
    const preampSlider = document.getElementById('preampSlider');
    const eqSlidersContainer = document.getElementById('eqSlidersContainer');
    const consoleContent = document.getElementById('consoleContent');

    let audioContext;
    let pinkNoiseSource;
    let preampGain;
    let eqFilters = [];
    const eqFrequencies = [];
    const f0 = 20; // Starting frequency (20 Hz)
    const fMax = 20000; // Maximum frequency (20 kHz)
    const resolution = 20; // Frequency resolution in Hz
    let isPlaying = false;

    function logToConsole(message, type = 'log') {
      const logEntry = document.createElement('div');
      logEntry.className = type;
      logEntry.textContent = `[${type.toUpperCase()}] ${message}`;
      consoleContent.appendChild(logEntry);
      consoleContent.scrollTop = consoleContent.scrollHeight;
    }

    // Generate EQ frequencies
    for (let freq = f0; freq <= fMax; freq += resolution) {
      eqFrequencies.push(freq);
    }
    logToConsole("EQ frequencies generated.");

    function setupAudioContext() {
      audioContext = new (window.AudioContext || window.webkitAudioContext)();
      logToConsole("Audio context initialized.");
    }

    function setupPinkNoise() {
      const bufferSize = audioContext.sampleRate * 2; // 2 seconds of noise
      const buffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate);
      const output = buffer.getChannelData(0);

      for (let i = 0; i < bufferSize; i++) {
        output[i] = Math.random() * 2 - 1; // White noise
      }

      pinkNoiseSource = audioContext.createBufferSource();
      pinkNoiseSource.buffer = buffer;
      pinkNoiseSource.loop = true;

      preampGain = audioContext.createGain();
      preampGain.gain.value = Math.pow(10, preampSlider.value / 20);

      pinkNoiseSource.connect(preampGain);
      preampGain.connect(audioContext.destination);
      logToConsole("Pink noise source and preamp setup completed.");
    }

    function setupEQFilters() {
      eqFilters = eqFrequencies.map(freq => {
        const filter = audioContext.createBiquadFilter();
        filter.type = 'peaking';
        filter.frequency.value = freq;
        filter.Q.value = 12;
        filter.gain.value = 0; // Default gain
        return filter;
      });
      logToConsole("EQ filters created.");
    }

    function createEQSliders() {
      eqSlidersContainer.innerHTML = ""; // Clear any existing sliders
      eqFrequencies.forEach((freq, index) => {
        const container = document.createElement('div');
        container.className = 'slider-container';

        const label = document.createElement('label');
        label.textContent = `${freq.toFixed(2)} Hz`;
        label.htmlFor = `eqSlider${index}`;

        const slider = document.createElement('input');
        slider.type = 'range';
        slider.id = `eqSlider${index}`;
        slider.min = -15;
        slider.max = 15;
        slider.step = 0.1;
        slider.value = 0;

        slider.addEventListener('input', () => {
          eqFilters[index].gain.value = parseFloat(slider.value);
          logToConsole(`EQ slider at ${freq} Hz set to ${slider.value} dB.`);
        });

        container.appendChild(label);
        container.appendChild(slider);
        eqSlidersContainer.appendChild(container);
      });

      logToConsole("EQ sliders created.");
    }

    function calculateCombinedFrequencyResponse() {
      const frequencies = new Float32Array(eqFrequencies.length);
      const magResponse = new Float32Array(eqFrequencies.length);
      const phaseResponse = new Float32Array(eqFrequencies.length);

      eqFrequencies.forEach((freq, index) => {
        frequencies[index] = freq;
      });

      const combinedResponse = new Float32Array(eqFrequencies.length).fill(0);

      eqFilters.forEach(filter => {
        filter.getFrequencyResponse(frequencies, magResponse, phaseResponse);
        magResponse.forEach((mag, index) => {
          combinedResponse[index] += 20 * Math.log10(mag); // Convert magnitude to dB and combine
        });
      });

      return { frequencies, combinedResponse };
    }

    function exportEQFrequencyResponse() {
      if (!audioContext) {
        alert('Please initialize playback first.');
        logToConsole("Playback not initialized. Cannot export EQ response.", "warn");
        return;
      }

      const { frequencies, combinedResponse } = calculateCombinedFrequencyResponse();

      let csvContent = "Frequency (Hz),Combined Gain (dB)\n";
      frequencies.forEach((freq, index) => {
        csvContent += `${freq.toFixed(2)},${combinedResponse[index].toFixed(2)}\n`;
      });

      const blob = new Blob([csvContent], { type: 'text/csv' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'combined_eq_frequency_response.csv';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      logToConsole("Combined EQ frequency response exported successfully.");
    }

    preampSlider.addEventListener('input', () => {
      if (preampGain) {
        preampGain.gain.value = Math.pow(10, preampSlider.value / 20);
        logToConsole(`Preamp slider set to ${preampSlider.value} dB.`);
      }
    });

    playPauseButton.addEventListener('click', () => {
      if (!isPlaying) {
        if (!audioContext) {
          setupAudioContext();
          setupPinkNoise();
          setupEQFilters();
          createEQSliders();
        }
        pinkNoiseSource.start(0);
        playPauseButton.textContent = 'Pause Band-Passed Pink Noise';
        nextButton.disabled = false;
        exportButton.disabled = false;
        isPlaying = true;
        logToConsole("Playback started.");
      } else {
        pinkNoiseSource.stop();
        audioContext.close();
        audioContext = null;
        playPauseButton.textContent = 'Play Band-Passed Pink Noise';
        nextButton.disabled = true;
        exportButton.disabled = true;
        isPlaying = false;
        logToConsole("Playback stopped.");
      }
    });

    exportButton.addEventListener('click', exportEQFrequencyResponse);

    logToConsole("Application initialized.");
  </script>
</body>
</html>
