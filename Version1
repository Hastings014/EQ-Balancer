<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Frequency Response Export</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      margin: 20px;
    }
    button {
      padding: 10px 20px;
      font-size: 16px;
      margin: 10px;
    }
    .slider-container {
      margin: 20px 0;
      text-align: left;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .slider-container label {
      margin-bottom: 5px;
      font-size: 14px;
    }
    input[type="range"] {
      width: 90%;
    }
  </style>
</head>
<body>
  <h1>Frequency Response Export</h1>
  <button id="playPauseButton">Play Band-Passed Pink Noise</button>
  <button id="nextButton" disabled>Next</button>
  <button id="exportButton" disabled>Export Frequency Response</button>

  <div class="slider-container">
    <label for="preampSlider">Preamp (-15 dB to +15 dB)</label>
    <input type="range" id="preampSlider" min="-15" max="15" step="0.1" value="0">
  </div>

  <div id="eqSlidersContainer">
    <!-- EQ sliders will be dynamically added here -->
  </div>

  <script>
    const playPauseButton = document.getElementById('playPauseButton');
    const nextButton = document.getElementById('nextButton');
    const exportButton = document.getElementById('exportButton');
    const preampSlider = document.getElementById('preampSlider');
    const eqSlidersContainer = document.getElementById('eqSlidersContainer');

    let audioContext;
    let pinkNoiseBuffer;
    let pinkNoiseSource;
    let preampGain;
    let bandPassFilter;
    let analyser;
    let eqBands = [];
    let currentBandIndex = 0; // To track the current EQ slider for band-pass filtering
    let isPlaying = false;

    // Generate frequencies for 1/12th octave from 20 Hz to 20 kHz
    const eqFrequencies = [];
    const f0 = 20; // Starting frequency (20 Hz)
    const fMax = 20000; // Maximum frequency (20 kHz)
    let n = 0;

    while (true) {
      const freq = f0 * Math.pow(2, n / 12);
      if (freq > fMax) break;
      eqFrequencies.push(freq);
      n++;
    }

    function generatePinkNoiseBuffer() {
      const sampleRate = audioContext.sampleRate;
      const bufferSize = sampleRate * 2; // 2 seconds of pink noise
      const buffer = audioContext.createBuffer(1, bufferSize, sampleRate);
      const output = buffer.getChannelData(0);

      let b0 = 0, b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0, b6 = 0;
      for (let i = 0; i < bufferSize; i++) {
        const white = Math.random() * 2 - 1;
        b0 = 0.99886 * b0 + white * 0.0555179;
        b1 = 0.99332 * b1 + white * 0.0750759;
        b2 = 0.96900 * b2 + white * 0.1538520;
        b3 = 0.86650 * b3 + white * 0.3104856;
        b4 = 0.55000 * b4 + white * 0.5329522;
        b5 = -0.7616 * b5 - white * 0.0168980;
        output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
        output[i] *= 0.11; // Normalize volume
        b6 = white * 0.115926;
      }

      return buffer;
    }

    function setupAudioGraph() {
      audioContext = new (window.AudioContext || window.webkitAudioContext)();

      pinkNoiseBuffer = generatePinkNoiseBuffer();

      pinkNoiseSource = audioContext.createBufferSource();
      pinkNoiseSource.buffer = pinkNoiseBuffer;
      pinkNoiseSource.loop = true;

      preampGain = audioContext.createGain();
      preampGain.gain.value = Math.pow(10, preampSlider.value / 20);

      bandPassFilter = audioContext.createBiquadFilter();
      bandPassFilter.type = 'bandpass';
      bandPassFilter.frequency.value = eqFrequencies[currentBandIndex];
      bandPassFilter.Q.value = 12;

      analyser = audioContext.createAnalyser();
      analyser.fftSize = 32768;

      bandPassFilter.connect(preampGain);
      preampGain.connect(analyser);
      analyser.connect(audioContext.destination);
      pinkNoiseSource.connect(bandPassFilter);
    }

    function togglePlayPause() {
      if (!isPlaying) {
        if (!audioContext) {
          setupAudioGraph();
        }
        pinkNoiseSource.start(0);
        playPauseButton.textContent = 'Pause Band-Passed Pink Noise';
        nextButton.disabled = false;
        exportButton.disabled = false; // Enable export button
        isPlaying = true;
      } else {
        pinkNoiseSource.stop();
        audioContext.close();
        audioContext = null;
        playPauseButton.textContent = 'Play Band-Passed Pink Noise';
        nextButton.disabled = true;
        exportButton.disabled = true; // Disable export button
        isPlaying = false;
      }
    }

    function exportFrequencyResponse() {
      if (!audioContext || !analyser) {
        alert('Please start playback to initialize the audio context.');
        return;
      }

      try {
        const frequencyData = new Float32Array(analyser.frequencyBinCount);
        analyser.getFloatFrequencyData(frequencyData);

        let csvContent = "Frequency (Hz),Amplitude (dB)\n";
        const nyquist = audioContext.sampleRate / 2;
        const increment = nyquist / analyser.frequencyBinCount;

        for (let i = 0; i < analyser.frequencyBinCount; i++) {
          const frequency = i * increment;
          if (frequency >= 20 && frequency <= 20000) {
            csvContent += `${frequency.toFixed(2)},${frequencyData[i].toFixed(2)}\n`;
          }
        }

        if (csvContent.split("\n").length <= 2) {
          alert('Frequency data could not be captured. Ensure playback is active.');
          return;
        }

        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'frequency_response.csv';
        a.click();
        URL.revokeObjectURL(url);
      } catch (error) {
        console.error('Error exporting frequency response:', error);
        alert('An error occurred while exporting the frequency response.');
      }
    }

    function createEQSliders() {
      eqFrequencies.forEach((freq, index) => {
        const container = document.createElement('div');
        container.className = 'slider-container';

        const label = document.createElement('label');
        label.textContent = `${freq.toFixed(2)} Hz`;
        label.htmlFor = `eqSlider${index}`;

        const slider = document.createElement('input');
        slider.type = 'range';
        slider.id = `eqSlider${index}`;
        slider.min = -15;
        slider.max = 15;
        slider.step = 0.1;
        slider.value = 0;

        container.appendChild(label);
        container.appendChild(slider);
        eqSlidersContainer.appendChild(container);
      });
    }

    preampSlider.addEventListener('input', () => {
      if (preampGain) {
        preampGain.gain.value = Math.pow(10, preampSlider.value / 20);
      }
    });
    playPauseButton.addEventListener('click', togglePlayPause);
    nextButton.addEventListener('click', () => {
      if (audioContext && bandPassFilter) {
        currentBandIndex = (currentBandIndex + 1) % eqFrequencies.length;
        bandPassFilter.frequency.value = eqFrequencies[currentBandIndex];
      }
    });
    exportButton.addEventListener('click', exportFrequencyResponse);

    // Create EQ sliders on page load
    createEQSliders();
  </script>
</body>
</html>
